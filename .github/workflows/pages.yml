name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc jq curl

      - id: ensure_license
        name: Ensure MIT License exists (and mark if created)
        run: |
          if [ ! -f LICENSE ]; then
            YEAR=$(date +%Y)
            printf '%s\n' "MIT License" "" "Copyright (c) $YEAR Steph Buongiorno" "" "Permission is hereby granted, free of charge, to any person obtaining a copy" "of this software and associated documentation files (the \"Software\"), to deal" "in the Software without restriction, including without limitation the rights" "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" "copies of the Software, and to permit persons to whom the Software is" "furnished to do so, subject to the following conditions:" "" "The above copyright notice and this permission notice shall be included in all" "copies or substantial portions of the Software." "" "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" "SOFTWARE." > LICENSE
            echo "MIT License generated."
            echo "created=true" >> "$GITHUB_OUTPUT"
          else
            echo "LICENSE file already exists — skipping generation."
            echo "created=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit LICENSE to repo (first time only)
        if: steps.ensure_license.outputs.created == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add LICENSE
          git commit -m "Add MIT LICENSE (auto-generated)"
          git push

      - id: build_page
        name: Build index.html with custom template + grid sidebar (dynamic URLs)
        env:
          REPO_HTML_TITLE: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          REPO_FULL: ${{ github.repository }}
        run: |
          set -e
          GENERATED=0

          # === Compute dynamic URLs ===
          REPO_NAME="${REPO_FULL#*/}"
          REPO_URL="https://github.com/${REPO_FULL}"
          if [ "$REPO_NAME" = "${OWNER}.github.io" ]; then
            PAGES_URL="https://${OWNER}.github.io/"
          else
            PAGES_URL="https://${OWNER}.github.io/${REPO_NAME}/"
          fi

          cat > pandoc_template.html <<'TPL'
          <!doctype html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>$title$</title>
          </head>
          <body>
          $for(include-before)$
          $include-before$
          $endfor$
          $body$
          $for(include-after)$
          $include-after$
          $endfor$
          </body>
          </html>
          TPL

          if [ -f index.html ]; then
            echo "Keeping existing index.html (not regenerating)."
          elif [ -f README.md ]; then
            pandoc README.md -f markdown -t html -s \
              --template=pandoc_template.html \
              -o index.html \
              --metadata title="$REPO_HTML_TITLE"
            GENERATED=1
          else
            printf '%s\n' '<!doctype html><html><head><meta charset="utf-8"><title>Site</title></head><body>' '<h1>Site</h1>' '<p>No README.md found. Add one and push to regenerate this page.</p>' '</body></html>' > index.html
            GENERATED=1
          fi

          CSS='<style>body{font-family:Arial,Helvetica,sans-serif} ... </style>'
          if grep -qi '</head>' index.html; then
            awk -v css="$CSS" 'BEGIN{IGNORECASE=1} { if (!done && match(tolower($0), /<\/head>/)) { sub(/<\/head>/, css"</head>"); done=1 } print }' index.html > index.html.tmp
            mv index.html.tmp index.html
          fi

          HOMELINK="$PAGES_URL"
          if ! grep -qi '<div class="page"' index.html; then
            awk -v home="$HOMELINK" 'BEGIN{IGNORECASE=1}
              {
                if (!done && match(tolower($0), /<body[^>]*>/)) {
                  sub(/<body[^>]*>/, "&\n<div class=\"page\"><aside class=\"sidebar\"><a href=\"" home "\" aria-label=\"Go to home\">← Home</a></aside>\n<main class=\"content\"><div class=\"container\">");
                  done=1
                }
                print
              }' index.html > index.html.tmp && mv index.html.tmp index.html
            awk 'BEGIN{IGNORECASE=1} { sub(/<\/body>/, "</div></main></div></body>"); print }' index.html > index.html.tmp && mv index.html.tmp index.html
          fi

          esc() { printf '%s' "$1" | sed 's/[&/\\]/\\&/g'; }
          REPO_URL_ESC=$(esc "$REPO_URL")
          PAGES_URL_ESC=$(esc "$PAGES_URL")
          sed -i -e "s/GITHUB_REPO_URL/${REPO_URL_ESC}/g" -e "s/GITHUB_REPO/${REPO_URL_ESC}/g" -e "s/GITHUB_PAGES_URL/${PAGES_URL_ESC}/g" index.html
          echo "generated=$GENERATED" >> "$GITHUB_OUTPUT"

      - name: Inject License/Citation/BibTeX block BELOW README content (inside container)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -e
          REPO_NAME="${REPO#*/}"
          REPO_URL="https://github.com/$REPO"
          if [ "$REPO_NAME" = "${OWNER}.github.io" ]; then
            PAGES_URL="https://${OWNER}.github.io/"
          else
            PAGES_URL="https://${OWNER}.github.io/${REPO_NAME}/"
          fi
          LAST_UPDATE=$(git log -1 --format=%cI || date -u +%Y-%m-%dT%H:%M:%SZ)
          YEAR=$(date -u -d "$LAST_UPDATE" +%Y 2>/dev/null || date -u +%Y)

          citation_written="Steph Buongiorno. $REPO_NAME. $YEAR. Available at: $REPO_URL"
          authors_bibtex="Steph Buongiorno"
          bibtex="@misc{$REPO_NAME-$YEAR,
            author = {$authors_bibtex},
            title = {$REPO_NAME},
            year = {$YEAR},
            howpublished = {\\url{$REPO_URL}},
            note = {Last updated: $LAST_UPDATE}
          }"

          EXTRAS=$(cat <<HTML
          <section class="extras">
            <hr>
            <h2>License</h2>
            <p>This project is licensed under the <a href="LICENSE">MIT License</a>.</p>
            <h2>Suggested Citation</h2>
            <p>$citation_written</p>
            <h3>BibTeX</h3>
            <pre><code>$bibtex</code></pre>
            <h3>Repository</h3>
            <p><em>$REPO_NAME</em><br>
            <a href="$REPO_URL">$REPO_URL</a><br>
            <a href="$PAGES_URL">$PAGES_URL</a><br>
            <strong>Last updated:</strong> $LAST_UPDATE</p>
          </section>
          HTML
          )

          awk -v block="$EXTRAS" 'BEGIN{IGNORECASE=1}
            {
              line=$0
              if (!done && match(tolower(line), /<\/div>\s*<\/main>\s*<\/div>\s*<\/body>/)) {
                sub(/<\/div>\s*<\/main>\s*<\/div>\s*<\/body>/, block"</div></main></div></body>")
                done=1
              }
              print
            }' index.html > index.html.tmp && mv index.html.tmp index.html

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

      - name: Show deployed Pages URL in summary
        run: |
          echo "### Deployed Pages URL" >> "$GITHUB_STEP_SUMMARY"
          echo "${{ steps.deployment.outputs.page_url }}" >> "$GITHUB_STEP_SUMMARY"

